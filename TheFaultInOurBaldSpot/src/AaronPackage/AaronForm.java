package AaronPackage;

import java.awt.Toolkit;
import java.util.Timer;
import java.util.TimerTask;
import java.awt.Component;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.SwingWorker;

public class AaronForm extends javax.swing.JFrame {

   Timer aaronGameTimer = new Timer();
   
   TimerTask bulletMovement = new TimerTask(){
     public void run(){
           
          try {
            for(JLabel item:staplebullets)
            {
      
                item.setLocation(item.getLocation().x + 20, item.getLocation().y);
            }
            for (JLabel item:staplebullets){
                if (item.getLocation().y <-20) {
                    staplebullets.remove(item);
                    System.out.println("REMOVED");
                }
            }
         } catch(Exception e) {}
       }
};
   TimerTask gravity = new TimerTask(){
       public void run(){
           
         if ((!checkCollision(player, 0, +10))) {   
          player.setLocation(player.getLocation().x, player.getLocation().y + 10);
       }
       }
   };
  
   
   
    ArrayList<JLabel> staplebullets = new ArrayList<JLabel>(0);
ArrayList<JLabel> spikelist = new ArrayList<JLabel>(0);
ArrayList<JLabel> floorlist = new ArrayList<JLabel>(0);
 ArrayList<String> block1 = new ArrayList<String>(0);
ArrayList<String> block2 = new ArrayList<String>(0);
ArrayList<String> spike1 = new ArrayList<String>(0);
ArrayList<String> spike2 = new ArrayList<String>(0);
    
    
    private boolean checkCollision(javax.swing.JLabel _lbl, int _x, int _y) {
//creating a temporary rectangle with (x, y) coordinates equal to where image is trying to move
//also same width and height as original
        Rectangle rect = new Rectangle(_lbl.getBounds().x + _x, _lbl.getBounds().y + _y, _lbl.getWidth(), _lbl.getHeight());

//check if temporary rectangle intersect with wallLabel        
        if (rect.intersects(bottomFloor.getBounds())) {
            return true;
        } else {
            return false;
        }
    }
    
    

    
   
    public AaronForm() {
        initComponents();

        myInitComponents();
    }
//       public static boolean passageSearch(ArrayList numPsalms, String psalmNumber) {
//        //For statement checks each item in the number psalm array
//        for (k = 0; k < numPsalms.size(); k++) {
//            //If statement checks if the item in the numPsalms array is equal to the number given by the user then returns true 
//            if (numPsalms.get(k).equals(psalmNumber)) {
//                return true;
//            }
//        }
//        //Returns false if the user doesnt input a correct psalm number
//        return false;
//    }
   
  


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        bottomFloor = new javax.swing.JLabel();
        player = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1080, 720));
        setSize(new java.awt.Dimension(1080, 720));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });
        getContentPane().setLayout(null);

        bottomFloor.setName("bottomFloor"); // NOI18N
        getContentPane().add(bottomFloor);
        bottomFloor.setBounds(0, 542, 772, 70);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(thefaultinourbaldspot.TheFaultInOurBaldSpotApp.class).getContext().getResourceMap(AaronForm.class);
        player.setText(resourceMap.getString("player.text")); // NOI18N
        player.setName("player"); // NOI18N
        getContentPane().add(player);
        player.setBounds(86, 338, 115, 198);

        pack();
    }// </editor-fold>//GEN-END:initComponents
// public boolean checkGround(javax.swing.JLabel _lbl, int _x, int _y){
//    //creating a temporary rectangle with (x, y) coordinates equal to where image is trying to move
////also same width and height as original
//        Rectangle rect = new Rectangle(_lbl.getBounds().x + _x, _lbl.getBounds().y + _y, _lbl.getWidth(), _lbl.getHeight());
//
////check if temporary rectangle intersect with wallLabel        
//        if (rect.intersects(bottomFloor.getBounds())) {
//            return true;
//        } else {
//            return false;
//        }
//}

    public void myInitComponents() {
        //Initialize a Buffered Image
        BufferedImage img = null;
        //set the Buffered Image to the picture file

//        same as above, but in a condensed version
        try {
            player.setIcon(new ImageIcon((ImageIO.read(new File("MegaAaron.png"))).getScaledInstance(player.getWidth(), player.getHeight(), Image.SCALE_SMOOTH)));
            bottomFloor.setIcon(new ImageIcon((ImageIO.read(new File("AaronFloor.png"))).getScaledInstance(bottomFloor.getWidth(), bottomFloor.getHeight(), Image.SCALE_SMOOTH)));
        } catch (IOException ex) {
            Logger.getLogger(AaronForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }


    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed

      

        if (evt.getKeyCode() == 90) {
            if (!checkCollision(player, 0, -100) && (checkCollision(player, 0, +10))) {
                player.setLocation(player.getLocation().x, player.getLocation().y - 100);
aaronGameTimer.scheduleAtFixedRate(gravity,100,100);
            }
        }
        //down key pressed
        if (evt.getKeyCode() == 40) {
            if (!checkCollision(player, 0, 10)) {
                player.setLocation(player.getLocation().x, player.getLocation().y + 10);
            }
        }
        //left key pressed
        if (evt.getKeyCode() == 37) {
            if (!checkCollision(player, -10, 0)) {
                player.setLocation(player.getLocation().x - 10, player.getLocation().y);
            }
        }
        //right key pressed
        if (evt.getKeyCode() == 39) {
            if (!checkCollision(player, 10, 0)) {
                player.setLocation(player.getLocation().x + 10, player.getLocation().y);
            }
        }


    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
         if (evt.getKeyCode() == 88) {
  
            bullet();
            aaronGameTimer.scheduleAtFixedRate(bulletMovement,100,10);
           
        }
    }//GEN-LAST:event_formKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])  {
     
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
             
                new AaronForm().setVisible(true);
//    readLevelFile(block1);
            }
        });
    }

    public void bullet() {
        JLabel bullet1 = new JLabel();

        System.out.println("Label Created");
        getContentPane().add(bullet1);
        bullet1.setBounds(player.getX() + player.getWidth() + 10, player.getY(), 50, 100);

        System.out.println("Bounds Set");
        try {
            bullet1.setIcon(new ImageIcon((ImageIO.read(new File("StapleBullet.png"))).getScaledInstance(bullet1.getWidth(), bullet1.getHeight(), Image.SCALE_SMOOTH)));
        } catch (IOException ex) {
            System.out.println("NO IMAGE");
            Logger.getLogger(AaronForm.class.getName()).log(Level.SEVERE, null, ex);
        }
      //  setComponentZOrder(bullet1, 0);
        System.out.println("Try performed");
        staplebullets.add(bullet1);
         
    }
      public static void readLevelFile(ArrayList block1) throws IOException {
        //Initilizises a string varibable that stores the line the program is currently reading
        String myLine;
        BufferedReader readFile = new BufferedReader(new FileReader("AaronsLevelFile.txt"));
        //Do statement ensures that the program only stops reading the file when it reaches a blank line
        do {
            //Stores the line that the program is currently looking at as the variable myLine
            myLine = readFile.readLine();
 String substring = myLine;
//If statement ensures that if the line the program is currently looking at is null then the program removes the null from the array list and breaks out of the loop
            if (myLine == ",") {
substring = myLine.substring(0 ,myLine.length() -1 );

block1.add(substring);
             
            }
            if(myLine ==null){
                break;
            }
   
    
        } while (true);
//Closez the file to ensure there is no complications
        readFile.close();
    }
    
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JLabel bottomFloor;
    javax.swing.ButtonGroup buttonGroup1;
    javax.swing.JLabel player;
    // End of variables declaration//GEN-END:variables
}
